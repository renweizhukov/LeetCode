class Solution{public:    vector<vector<string>> groupAnagrams(vector<string>& strs)    {        unordered_map<string, list<string>> anagramMap;        for (auto& str : strs)        {            string tmp  = str;            // Sort the string such that anagrams will have the same key.            sort(tmp.begin(), tmp.end());            auto itMap  = anagramMap.find(tmp);            if (itMap  == anagramMap.end())            {                // This string is not an anagram of any existing string                 // in the map.                anagramMap.insert(make_pair(tmp, list<string>({ str  })));            }            else            {                // This string is an anagram of some existing string(s)                 // in the map.                auto itList  = itMap->second.begin();                // Insert this string to the position according to                 // the lexicographic order.                for (; itList  != itMap->second.end(); itList++)                {                    if (str < *itList)                    {                        itMap->second.insert(itList, str);                        break;                    }                }                if (itList  == itMap->second.end())                {                    itMap->second.push_back(str);                }            }        }        // Copy the sorted string groups to the result vector.        vector<vector<string>> res;        for (auto& strPair : anagramMap)        {            vector<string> oneAnagram;            for (auto& str : strPair.second)            {                oneAnagram.push_back(str);            }            res.push_back(oneAnagram);        }        return res;    }};