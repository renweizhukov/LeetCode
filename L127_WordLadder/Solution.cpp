class Solution{public:    // Double breadth-first search (double search from both start and end).    int ladderLength(string start, string end, unordered_set<string> &dict)    {        if (start  == end)        {            return 1;        }        int strLen  = start.length();        // startDict = words which haven't been reached by the search from start.        //           = dict - start + end.        unordered_set<string> startDict  = dict;        startDict.erase(start);        startDict.insert(end);        queue<string> startQ;        startQ.push(start);        int startQSize  = 1;        int startStep  = 1;        // endDict = words which haven't been reached by the search from end.        //         = dict - end + start.        unordered_set<string> endDict  = dict;        endDict.erase(end);        endDict.insert(start);        queue<string> endQ;        endQ.push(end);        int endQSize  = 1;        int endStep  = 1;        while ((startQSize > 0) && (endQSize > 0))        {            // Search one step further from start.            startStep++;            for (int i  = 0; i < startQSize; i++)            {                string startStr  = startQ.front();                startQ.pop();                for (int j  = 0; j < strLen; j++)                {                    char tmp  = startStr[j];                    for (char ch  = 'a'; ch  <= 'z'; ch++)                    {                        if (ch  != tmp)                        {                            startStr[j] = ch;                            auto itStart  = startDict.find(startStr);                            if (itStart  != startDict.end())                            {                                // This string hasn't been visited by the                                 // search from start.                                auto itEnd  = endDict.find(startStr);                                if (itEnd  == endDict.end())                                {                                    // This startStr has been reached by                                     // the search from end.                                    return startStep  + endStep  - 1;                                }                                startQ.push(startStr);                                startDict.erase(itStart);                            }                        }                    }                    // Restore startStr[j].                    startStr[j] = tmp;                }            }            startQSize  = startQ.size();            // Search one step further from end.            endStep++;            for (int i  = 0; i < endQSize; i++)            {                string endStr  = endQ.front();                endQ.pop();                for (int j  = 0; j < strLen; j++)                {                    char tmp  = endStr[j];                    for (char ch  = 'a'; ch  <= 'z'; ch++)                    {                        if (ch  != tmp)                        {                            endStr[j] = ch;                            auto itEnd  = endDict.find(endStr);                            if (itEnd  != endDict.end())                            {                                // This string hasn't been visited by the                                 // search from end.                                auto itStart  = startDict.find(endStr);                                if (itStart  == startDict.end())                                {                                    // This endStr has been reached by the                                     // search from start.                                    return endStep  + startStep  - 1;                                }                                endQ.push(endStr);                                endDict.erase(itEnd);                            }                        }                    }                    // Restore endStr[j].                    endStr[j] = tmp;                }            }            endQSize  = endQ.size();        }        return 0;    }};